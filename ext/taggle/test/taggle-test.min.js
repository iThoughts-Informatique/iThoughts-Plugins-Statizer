function createContainer(e,t){"use strict"
var n=document.createElement("div")
return n.style.width=e+"px",n.style.height=t+"px",n}function getObjectLength(e){"use strict"
var t,n=0
for(t in e)e.hasOwnProperty(t)&&(n+=1)
return n}var expect=chai.expect
describe("Taggle",function(){"use strict"
beforeEach(function(){this.container=createContainer(500,300),this.container.id="taggle",document.body.appendChild(this.container)}),afterEach(function(){this.container.parentNode.removeChild(this.container)}),describe("Options",function(){beforeEach(function(){this.instance=new Taggle(this.container)}),afterEach(function(){this.instance=null}),it("should disallow duplicate tags to be added by default",function(){expect(this.instance.getTags().values.length).to.equal(0),this.instance.add(["tag","tag"]),expect(this.instance.getTags().values.length).to.equal(1)}),it("should allow duplicate tags to be added when allowDuplicates is true",function(){var e=new Taggle(this.container,{allowDuplicates:!0})
expect(e.getTags().values.length).to.equal(0),e.add(["tag","tag"]),expect(e.getTags().values.length).to.equal(2)}),it("should preserve case when preserveCase is true",function(){var e=new Taggle(this.container,{preserveCase:!0})
expect(e.getTags().values.length).to.equal(0),e.add(["tag","Tag"]),expect(e.getTags().values).to.eql(["tag","Tag"]),expect(e.getTags().values.length).to.equal(2)}),it("should only allow tags provided in allowedTags",function(){var e="tag",t=new Taggle(this.container,{allowedTags:[e]})
t.add(e),t.add("another"),expect(t.getTags().values).to.eql([e]),expect(t.getTags().values.length).to.equal(1)}),it("should only disallow tags provided in disallowedTags",function(){var e="tag",t="anothertag",n=new Taggle(this.container,{disallowedTags:[e]})
n.add(e),n.add(t),expect(n.getTags().values).to.eql([t]),expect(n.getTags().values.length).to.equal(1)}),describe("#tagFormatter",function(){it("should throw if li element is not returned",function(){var e=new Taggle(this.container,{tagFormatter:function(){return""}})
expect(e.add.bind(e,"tag")).to["throw"]()}),it("should be called with an LI element",function(){var e=sinon.spy(),t=new Taggle(this.container,{tagFormatter:e})
t.add("tag"),expect(e.args[0][0].tagName).to.eq("LI")}),it("should allow you to format the LI element before it is added to the textarea",function(){var e="test",t=new Taggle(this.container,{tagFormatter:function(t){return t.innerHTML=e,t}})
t.add("tag")
var n=t.getContainer().querySelector(".taggle")
expect(n.innerHTML).to.eq(e)})}),describe("#onBeforeTagAdd",function(){it("should not add the tag if the function returns false",function(){var e=createContainer(300,400),t="tag"
document.body.appendChild(e)
var n=new Taggle(e,{tags:["some","tags",t],onBeforeTagAdd:function(){return!1}}),a=n.getTagValues().length
n.add(t),expect(n.getTagValues().length).to.eq(a),e.parentNode.removeChild(e)}),it("should add the tag if the function returns something other than false",function(){var e=createContainer(300,400),t="tag"
document.body.appendChild(e)
var n=new Taggle(e,{tags:["some","tags"],onBeforeTagAdd:function(){return"ads"}}),a=n.getTagValues().length
n.add(t),expect(n.getTagValues().length).to.eq(a+1),e.parentNode.removeChild(e)})}),describe("#onTagAdd",function(){it("should be called after a tag has been added",function(){var e,t=createContainer(300,400),n="one",a=sinon.spy()
document.body.appendChild(t),e=new Taggle(t,{onTagAdd:a}),expect(a).to.not.have.been.called,e.add(n),expect(a).to.have.been.calledOnce,expect(a.args[0][0]).to.not.be.ok,expect(a.args[0][1]).to.eq(n)}),it("should reflect one additional tag value when being called",function(){var e,t,n,a=createContainer(300,400),i="tag"
document.body.appendChild(a),n=new Taggle(a,{onTagAdd:function(){t=n.getTagElements().length}}),e=n.getTagElements().length,n.add(i),expect(t).to.eq(e+1),a.parentNode.removeChild(a)}),it("should be chainable",function(){var e,t,n,a=createContainer(300,400),i="tag",o="tag2"
document.body.appendChild(a),n=new Taggle(a,{onTagAdd:function(){t=n.getTagElements().length}}),e=n.getTagElements().length,n.add(i).add(o),expect(t).to.eq(e+2),a.parentNode.removeChild(a)})}),describe("#onBeforeTagRemove",function(){it("should not remove the tag if the function returns false",function(){var e=createContainer(300,400),t="tag"
document.body.appendChild(e)
var n=new Taggle(e,{tags:["some","tags",t],onBeforeTagRemove:function(){return!1}}),a=n.getTagValues().length
n.remove(t),expect(n.getTagValues().length).to.eq(a),e.parentNode.removeChild(e)}),it("should remove the tag if the function returns something other than false",function(){var e=createContainer(300,400),t="tag"
document.body.appendChild(e)
var n=new Taggle(e,{tags:["some","tags",t],onBeforeTagRemove:function(){return"ads"}}),a=n.getTagValues().length
n.remove(t),expect(n.getTagValues().length).to.eq(a-1),e.parentNode.removeChild(e)}),it("should be chainable",function(){var e=createContainer(300,400),t="tag",n="tag2"
document.body.appendChild(e)
var a=new Taggle(e,{tags:["some","tags",t,n],onBeforeTagRemove:function(){return"ads"}}),i=a.getTagValues().length
a.remove(t).remove(n),expect(a.getTagValues().length).to.eq(i-2),e.parentNode.removeChild(e)})}),describe("#onTagRemove",function(){it("should be called after a tag has been removed",function(){var e,t=createContainer(300,400),n="one",a=sinon.spy()
document.body.appendChild(t),e=new Taggle(t,{onTagRemove:a}),expect(a).to.not.have.been.called,e.remove(n),expect(a).to.not.have.been.called,e.add(n),e.remove(n),expect(a).to.have.been.calledOnce,expect(a.args[0][0]).to.not.be.ok,expect(a.args[0][1]).to.eq(n)}),it("should reflect one less tag value when being called",function(){var e,t,n,a=createContainer(300,400),i="tag"
document.body.appendChild(a),n=new Taggle(a,{onTagRemove:function(){t=n.getTagElements().length}}),n.add(i),e=n.getTagElements().length,n.remove(i),expect(t).to.eq(e-1)})})}),describe("Overall functionality",function(){beforeEach(function(){this.instance=new Taggle(this.container)}),afterEach(function(){this.instance=null}),it("should allow for multiple instances to co-exist",function(){var e=createContainer(500,300)
e.id="taggle2",document.body.appendChild(e)
var t=["these","tags","should"],n=t.length,a=["not","affect","each","other"],i=a.length
this.instance.add(t)
var o=new Taggle(e,{tags:a})
o.remove("other"),expect(this.instance.getTagValues().length).to.equal(n),expect(o.getTagValues().length).to.equal(i-1),e.parentNode.removeChild(e)}),it("should lowercase tags to be added by default",function(){expect(this.instance.getTags().values.length).to.equal(0),this.instance.add(["Tag"]),expect(this.instance.getTags().values[0]).to.equal("tag")}),it("should clear any input when the input element is blurred",function(){var e=this.instance.getInput(),t="thing"
expect(this.instance.getTagValues().length).to.equal(0),e.focus(),e.value=t,e.blur(),expect(this.instance.getTagValues().length).to.equal(0)})}),describe("Public API",function(){beforeEach(function(){this.instance=new Taggle(this.container,{tags:["zero","one","two","three"]})}),afterEach(function(){this.instance=null}),describe("#getTagValues",function(){it("should match length of tags passed in options",function(){expect(this.instance.getTagValues().length).to.equal(4)}),it("should return a copy of the tag values",function(){var e=this.instance.getTagValues(),t=e.length
e.pop(),expect(this.instance.getTagValues().length).to.equal(t)})}),describe("#getTagElements",function(){it("should match length of added tags",function(){expect(this.instance.getTagElements().length).to.equal(4)})}),describe("#getTags",function(){it("should return an object with 2 arrays that match getTagValues() and getTagElements()",function(){expect(getObjectLength(this.instance.getTags())).to.equal(2),expect(this.instance.getTags().values.length).to.equal(4),expect(this.instance.getTags().elements.length).to.equal(4)})}),describe("#getContainer",function(){it("should return original selected DOM element",function(){expect(this.instance.getContainer()).to.equal(this.container)})}),describe("#getInput",function(){it("should return the container's text input",function(){expect(this.instance.getInput()).to.equal(this.instance.getContainer().querySelector('input[type="text"]'))})}),describe("#add",function(){it("should add a new tag from a string argument",function(){expect(this.instance.getTagElements().length).to.equal(4),this.instance.add("four"),this.instance.add(3),this.instance.add(!0),this.instance.add(!1),this.instance.add([]),this.instance.add([2]),this.instance.add(""),expect(this.instance.getTagElements().length).to.equal(5)}),it("should add new tags from an array of strings",function(){expect(this.instance.getTagElements().length).to.equal(4),this.instance.add(["four","five",4,!0,void 0]),this.instance.add(["",Array,!1]),expect(this.instance.getTagElements().length).to.equal(6)}),it("should add new tags from a comma delimited list",function(){expect(this.instance.getTagElements().length).to.equal(4)
var e="four, five, six, seven",t=this.instance.getTagValues().concat(e.split(","))
this.instance.add(e),expect(this.instance.getTagElements().length).to.equal(8),this.instance.getTagValues().forEach(function(e,n){expect(e).to.equal(t[n])})})}),describe("#remove",function(){beforeEach(function(){this.instance=new Taggle(this.container,{tags:["zero","one","two","three","four","three"]})}),it("should remove the most recent occurance of the tag if it exists",function(){expect(this.instance.getTagElements().length).to.equal(6),this.instance.remove("four"),this.instance.remove("five"),this.instance.remove(3),this.instance.remove(!1,!0),this.instance.remove(""),expect(this.instance.getTagElements().length).to.equal(5),expect(this.instance.getTagValues().length).to.equal(5),expect(this.instance.getTagValues()[4]).to.equal(this.instance.getTagValues()[3])}),it("should remove all occurances of a string if the second argument is true",function(){expect(this.instance.getTagElements().length).to.equal(6),this.instance.remove("three",!0),this.instance.remove("five",!0),this.instance.remove(2,!0),this.instance.remove("",!0),expect(this.instance.getTagElements().length).to.equal(4),expect(this.instance.getTagValues().length).to.equal(4),expect(this.instance.getTagValues()[3]).to.equal("four")})}),describe("#saveOnBlur",function(){beforeEach(function(){this.instance=new Taggle(this.container,{saveOnBlur:!0})}),it("should save remaining text as a tag when input is blurred",function(){var e=this.instance.getInput(),t="thing"
expect(this.instance.getTagValues().length).to.equal(0),e.focus(),e.value=t,e.blur(),expect(this.instance.getTagValues().length).to.equal(1),expect(this.instance.getTagValues()[0]).to.equal(t)})}),describe("#removeAll",function(){beforeEach(function(){this.instance=new Taggle(this.container,{tags:["zero","one","two","three","four","three"]})}),it("should remove all existent tags",function(){expect(this.instance.getTagElements().length).to.equal(6),this.instance.removeAll(),expect(this.instance.getTagElements().length).to.equal(0),expect(this.instance.getTagValues().length).to.equal(0)}),it("should be chainable",function(){expect(this.instance.getTagElements().length).to.equal(6),this.instance.removeAll().add("tag"),expect(this.instance.getTagElements().length).to.equal(1),expect(this.instance.getTagValues().length).to.equal(1)})})})})
